"undefined" == typeof Broadlook && ( Broadlook = { __namespace: !0 } );
Broadlook.Metadata = { __initialized: !1, Workflows: { ConvertProfilerLeadToNewCrmLead: "{3D1E0721-5911-4A12-813A-7BC5BD62D1E5}", ConvertProfilerLeadToNewCrmContact: "{7A317D6C-1E22-41F8-993D-C7A7AB98443E}", ConvertProfilerLeadToNewCrmContactAndNewCrmAccount: "{49584b61-2fe8-45b7-953d-e800a8e827e5}", ConvertCaptureContactToNewCrmLead: "{35932436-B9BA-4A37-9BA1-7E707A380762}", ConvertCaptureContactToNewCrmContact: "{4ec12fea-4458-49c5-9426-1a9236641a05}", ConvertCaptureContactToNewCrmContactAndNewCrmAccount: "{77c2628b-7655-40a6-a27e-1552dceb1833}",
    ProfileProfilerCompany: "{23CAC504-6848-44E1-9D11-75188F41E1E6}", UpdateCrmContact: "{02d35286-e9f6-4e3f-b7a9-64453ecfda2a}", __namespace: !0
}, Entities: { ProfilerLead: { EntityTypeCode: "10006", Name: "blt_profilerlead" }, ProfilerCompany: { EntityTypeCode: "10003", Name: "blt_profilercompany" }, CaptureRequest: { EntityTypeCode: "10010", Name: "blt_capturerequest" }, CaptureContact: { EntityTypeCode: "10012", Name: "blt_capturecontact", StatusCodes: { New: { Value: 1, Name: "New" }, Exported: { Value: 85888E4, Name: "Exported"}} }, __namespace: !0 },
    getEntityProperty: function ( a, b ) {
        for ( var c = Broadlook.Metadata.queryMetadataService( "<Request xsi:type='RetrieveEntityRequest'><EntityItems>EntityOnly</EntityItems><RetrieveAsIfPublished>true</RetrieveAsIfPublished><LogicalName>" + a + "</LogicalName></Request>" ), e = c.selectNodes( "//EntityMetadata/DisplayName/LocLabels/LocLabel/Label" ), d = c.selectNodes( "//EntityMetadata/" + b ), f = 0; f < d.length; f++ ) if ( c.selectNodes( "//EntityMetadata/SchemaName" )[f].text.toLowerCase() == a ) return "displayname" == b.toLowerCase() ? e[f].text :
d[f].text
    }, queryMetadataService: function ( a ) {
        var b = new ActiveXObject( "Msxml2.XMLHTTP" ); b.open( "POST", "/mscrmservices/2007/MetadataService.asmx", !1 ); b.setRequestHeader( "Content-Type", "text/xml; charset=utf-8" ); b.setRequestHeader( "SOAPAction", "http://schemas.microsoft.com/crm/2007/WebServices/Execute" ); b.send( "<?xml version='1.0' encoding='utf-8'?><soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Header><CrmAuthenticationToken xmlns='http://schemas.microsoft.com/crm/2007/WebServices'><AuthenticationType xmlns='http://schemas.microsoft.com/crm/2007/CoreTypes'>" +
AUTHENTICATION_TYPE + "</AuthenticationType><OrganizationName xmlns='http://schemas.microsoft.com/crm/2007/CoreTypes'>" + ORG_UNIQUE_NAME + "</OrganizationName><CallerId xmlns='http://schemas.microsoft.com/crm/2007/CoreTypes'>00000000-0000-0000-0000-000000000000</CallerId></CrmAuthenticationToken></soap:Header><soap:Body><Execute xmlns='http://schemas.microsoft.com/crm/2007/WebServices'>" + a + "</Execute></soap:Body></soap:Envelope>" ); return b.responseXML
    }, init: function () {
        this.__initialized || ( Broadlook.Metadata.Entities.CaptureContact.EntityTypeCode =
Broadlook.Metadata.getEntityProperty( Broadlook.Metadata.Entities.CaptureContact.Name, "ObjectTypeCode" ), Broadlook.Metadata.Entities.CaptureRequest.EntityTypeCode = Broadlook.Metadata.getEntityProperty( Broadlook.Metadata.Entities.CaptureRequest.Name, "ObjectTypeCode" ), Broadlook.Metadata.Entities.ProfilerLead.EntityTypeCode = Broadlook.Metadata.getEntityProperty( Broadlook.Metadata.Entities.ProfilerLead.Name, "ObjectTypeCode" ), Broadlook.Metadata.Entities.ProfilerCompany.EntityTypeCode = Broadlook.Metadata.getEntityProperty( Broadlook.Metadata.Entities.ProfilerCompany.Name,
"ObjectTypeCode" ), this.__initialized = !0 )
    }, __namespace: !0
};
Broadlook.Library = { init: function () {
    Broadlook.Library.startTime = new Date; Broadlook.Library.demo = !1; try {
        var a = GetGlobalContext(); Broadlook.Library.serverUrl = a.getServerUrl(); "/" != Broadlook.Library.serverUrl[Broadlook.Library.serverUrl.length - 1] && ( Broadlook.Library.serverUrl += "/" ); Broadlook.Library.ODataPath = Broadlook.Library.serverUrl + "XRMServices/2011/OrganizationData.svc"; Broadlook.Library.currentUserId = a.getUserId(); var b = a.getQueryStringParameters(); Broadlook.Library.entityId = b.id; Broadlook.Library.entityTypeName =
b.typename; Broadlook.Library.entityTypeCode = b.etc; Broadlook.Library.nz( Broadlook.Library.entityTypeCode ) || ( Broadlook.Library.entityTypeCode = b.typecode )
    } catch ( c ) { Broadlook.Library.demo = !0, Broadlook.Library.serverUrl = "https://broadlook.crm.dynamics.com/", Broadlook.Library.ODataPath = Broadlook.Library.serverUrl + "XRMServices/2011/OrganizationData.svc", Broadlook.Library.currentUserId = "ID3" } Broadlook.Library.demo || Broadlook.Metadata.init()
}, getXrmPage: function () {
    if ( Broadlook.Library.demo ) {
        var a = { data: {} };
        a.data.entity = {}; a.data.entity.attributes = {}; return a
    } return document.parentWindow.parent.Xrm.Page
}, saveRecord: function () { Broadlook.Library.getXrmPage().data.entity.save() }, closeForm: function () { Broadlook.Library.getXrmPage().ui.close() }, retrieveUsers: function ( a ) {
    if ( Broadlook.Library.demo ) { for ( var b = [], c = 0; 12 > c; c++ ) { var e = {}; e.FullName = "Demo User " + c; e.SystemUserId = "ID" + c; b.push( e ) } c = {}; c.results = b; Broadlook.Library.nz( a ) && a( c ) } else b = new XMLHttpRequest, b.open( "GET", Broadlook.Library.ODataPath + "/SystemUserSet?$select=SystemUserId,FullName&$orderby=FullName&$filter=IsDisabled eq false and AccessMode/Value eq 0",
!0 ), b.setRequestHeader( "Accept", "application/json" ), b.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ), b.onreadystatechange = function () { Broadlook.Library.retrieveRecordCallBack( this, a ) }, b.send()
}, createAccountRecord: function ( a, b ) {
    var c = {}; c.Name = a; var c = window.JSON.stringify( c ), e = new XMLHttpRequest; e.open( "POST", Broadlook.Library.ODataPath + "/AccountSet", !0 ); e.setRequestHeader( "Accept", "application/json" ); e.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); e.onreadystatechange =
function () { Broadlook.Library.createAccountReqCallBack( this, b ) }; e.send( c )
}, createAccountReqCallBack: function ( a, b ) { if ( 4 == a.readyState ) if ( 201 == a.status ) { var c = JSON.parse( a.responseText ).d; "undefined" != typeof b && null != b && b( c.AccountId ) } else Broadlook.Library.errorHandler( a ), "undefined" != typeof b && null != b && b( !1 ) }, retrieveAccountRecords: function ( a, b ) {
    if ( Broadlook.Library.demo ) {
        for ( var c = [], e = 0; 12 > e; e++ ) { var d = {}; d.Name = "Demo Account " + e; d.AccountId = "ID" + e; c.push( d ) } e = {}; e.results = c; Broadlook.Library.nz( b ) &&
b( e )
    } else c = new XMLHttpRequest, c.open( "GET", Broadlook.Library.ODataPath + "/AccountSet?$filter=substringof('" + a + "',Name) and StateCode/Value eq 0&$select=Name,AccountId", !0 ), c.setRequestHeader( "Accept", "application/json" ), c.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ), c.onreadystatechange = function () { Broadlook.Library.retrieveRecordCallBack( this, b ) }, c.send()
}, retrieveProfilerLeadRecords: function ( a, b ) {
    if ( "undefined" == typeof a ) Broadlook.Library.showMessage( "'path' argument is empty" ),
b( !1 ); else { var c = new XMLHttpRequest; c.open( "GET", a, !0 ); c.setRequestHeader( "Accept", "application/json" ); c.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); c.onreadystatechange = function () { Broadlook.Library.retrieveRecordCallBack( this, b ) }; c.send() } 
}, connectProfilerLeadsToCrmAccount: function ( a, b, c ) {
    if ( "undefined" == typeof a ) Broadlook.Library.showError( "Missing parameter - Ids" ), c( !1 ); else if ( "undefined" == typeof b ) Broadlook.Library.showError( "Missing parameter - accountid" ), c( !1 ); else {
        for ( var a =
a.split( ";" ), e = [], d = 0; d < a.length; d++ ) { var f = a[d]; Broadlook.Library.nz( f ) && ( f = f.replace( "{", "" ).replace( "}", "" ), e.push( f ) ) } for ( var g = 0; g < e.length; g++ ) a = e[g], d = new XMLHttpRequest, f = { blt_crmaccountid: {} }, f.blt_crmaccountid.Id = b, f.blt_crmaccountid.LogicalName = "account", d.open( "POST", Broadlook.Library.ODataPath + "/blt_profilerleadSet(guid'" + a + "')", !0 ), d.setRequestHeader( "Accept", "application/json" ), d.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ), d.setRequestHeader( "X-HTTP-Method", "MERGE" ),
d.onreadystatechange = function () { Broadlook.Library.updateReqCallBack( this, c, g >= e.length - 1 ) }, d.send( JSON.stringify( f ) )
    } 
}, assignProfilerLeads: function ( a, b, c ) {
    if ( Broadlook.Library.demo ) "undefined" != typeof c && null != c && c( !0 ); else if ( "undefined" == typeof a ) Broadlook.Library.showError( "Missing parameter - Ids" ), c( !1 ); else if ( "undefined" == typeof b ) Broadlook.Library.showError( "Missing parameter - userid" ), c( !1 ); else {
        for ( var e = a.split( ";" ), a = [], d = 0; d < e.length; d++ ) {
            var f = e[d]; Broadlook.Library.nz( f ) && ( f = f.replace( "{",
"" ).replace( "}", "" ), a.push( f ) )
        } e = GenerateAuthenticationHeader(); for ( d = 0; d < a.length; d++ ) {
            var f = '<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">' + e + '  <soap:Body>    <Execute xmlns="http://schemas.microsoft.com/crm/2007/WebServices">      <Request xsi:type="AssignRequest">        <Target xsi:type="TargetOwnedblt_profilerlead">          <EntityId>' +
a[d] + '</EntityId>        </Target>        <Assignee>          <PrincipalId xmlns="http://schemas.microsoft.com/crm/2006/CoreTypes">' + b + '</PrincipalId>          <Type xmlns="http://schemas.microsoft.com/crm/2006/CoreTypes">User</Type>        </Assignee>      </Request>    </Execute>  </soap:Body></soap:Envelope>', g = new ActiveXObject( "Msxml2.XMLHTTP" ); g.Open( "POST", "/mscrmservices/2007/CrmService.asmx", !1 ); g.setRequestHeader( "SOAPAction", "http://schemas.microsoft.com/crm/2007/WebServices/Execute" );
            g.setRequestHeader( "Content-Type", "text/xml; charset=utf-8" ); g.setRequestHeader( "Content-Length", f.length ); g.send( f ); ( f = "" === g.responseXML.text ) || Broadlook.Library.showError( "Cannot assign new owner" ); d >= a.length - 1 && "undefined" != typeof c && null != c && c( f )
        } 
    } 
}, connectCaptureContactsToCrmAccount: function ( a, b, c ) {
    if ( "undefined" == typeof a ) Broadlook.Library.showError( "Missing parameter - Ids" ), c( !1 ); else if ( "undefined" == typeof b ) Broadlook.Library.showError( "Missing parameter - accountid" ), c( !1 ); else {
        for ( var a =
a.split( ";" ), e = [], d = 0; d < a.length; d++ ) { var f = a[d]; Broadlook.Library.nz( f ) && ( f = f.replace( "{", "" ).replace( "}", "" ), e.push( f ) ) } for ( var g = 0; g < e.length; g++ ) a = e[g], d = new XMLHttpRequest, f = { blt_crmaccountid: {} }, f.blt_crmaccountid.Id = b, f.blt_crmaccountid.LogicalName = "account", d.open( "POST", Broadlook.Library.ODataPath + "/blt_capturecontactSet(guid'" + a + "')", !0 ), d.setRequestHeader( "Accept", "application/json" ), d.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ), d.setRequestHeader( "X-HTTP-Method",
"MERGE" ), d.onreadystatechange = function () { Broadlook.Library.updateReqCallBack( this, c, g >= e.length - 1 ) }, d.send( JSON.stringify( f ) )
    } 
}, assignCaptureContacts: function ( a, b, c ) {
    if ( "undefined" == typeof a ) Broadlook.Library.showError( "Missing parameter - Ids" ), c( !1 ); else if ( "undefined" == typeof b ) Broadlook.Library.showError( "Missing parameter - userid" ), c( !1 ); else {
        for ( var e = a.split( ";" ), a = [], d = 0; d < e.length; d++ ) { var f = e[d]; Broadlook.Library.nz( f ) && ( f = f.replace( "{", "" ).replace( "}", "" ), a.push( f ) ) } e = GenerateAuthenticationHeader();
        for ( d = 0; d < a.length; d++ ) {
            var f = '<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">' + e + '  <soap:Body>    <Execute xmlns="http://schemas.microsoft.com/crm/2007/WebServices">      <Request xsi:type="AssignRequest">        <Target xsi:type="TargetOwnedblt_capturecontact">          <EntityId>' + a[d] + '</EntityId>        </Target>        <Assignee>          <PrincipalId xmlns="http://schemas.microsoft.com/crm/2006/CoreTypes">' +
b + '</PrincipalId>          <Type xmlns="http://schemas.microsoft.com/crm/2006/CoreTypes">User</Type>        </Assignee>      </Request>    </Execute>  </soap:Body></soap:Envelope>', g = new ActiveXObject( "Msxml2.XMLHTTP" ); g.Open( "POST", "/mscrmservices/2007/CrmService.asmx", !1 ); g.setRequestHeader( "SOAPAction", "http://schemas.microsoft.com/crm/2007/WebServices/Execute" ); g.setRequestHeader( "Content-Type", "text/xml; charset=utf-8" ); g.setRequestHeader( "Content-Length", f.length ); g.send( f ); ( f = "" === g.responseXML.text ) ||
Broadlook.Library.showError( "Cannot assign new owner" ); d >= a.length - 1 && "undefined" != typeof c && null != c && c( f )
        } 
    } 
}, updateReqCallBack: function ( a, b, c ) { 4 == a.readyState && ( 204 == a.status || 1223 == a.status ? c && "undefined" != typeof b && null != b && b( !0 ) : ( Broadlook.Library.errorHandler( a ), c && "undefined" != typeof b && null != b && b( !1 ) ) ) }, deactivateProfilerLeads: function ( a, b ) {
    if ( "undefined" == typeof a ) Broadlook.Library.showError( "Missing paramter - Ids" ), b( !1 ); else {
        for ( var c = a.split( ";" ), e = [], d = 0; d < c.length; d++ ) {
            var f = c[d]; Broadlook.Library.nz( f ) &&
( f = f.replace( "{", "" ).replace( "}", "" ), e.push( f ) )
        } for ( var g = 0; g < e.length; g++ ) {
            var c = e[g], d = "", d = d + '<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">', d = d + "  <s:Body>", d = d + '    <Execute xmlns="http://schemas.microsoft.com/xrm/2011/Contracts/Services" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">', d = d + '      <request i:type="b:SetStateRequest" xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts" xmlns:b="http://schemas.microsoft.com/crm/2011/Contracts">', d = d + '        <a:Parameters xmlns:c="http://schemas.datacontract.org/2004/07/System.Collections.Generic">',
d = d + "          <a:KeyValuePairOfstringanyType>", d = d + "            <c:key>EntityMoniker</c:key>", d = d + '            <c:value i:type="a:EntityReference">', d = d + ( "              <a:Id>" + c + "</a:Id>" ), d = d + ( "              <a:LogicalName>" + Broadlook.Metadata.Entities.ProfilerLead.Name + "</a:LogicalName>" ), d = d + '              <a:Name i:nil="true" />', d = d + "            </c:value>", d = d + "          </a:KeyValuePairOfstringanyType>", d = d + "          <a:KeyValuePairOfstringanyType>", d = d + "            <c:key>State</c:key>",
d = d + '            <c:value i:type="a:OptionSetValue">', d = d + "              <a:Value>1</a:Value>", d = d + "            </c:value>", d = d + "          </a:KeyValuePairOfstringanyType>", d = d + "          <a:KeyValuePairOfstringanyType>", d = d + "            <c:key>Status</c:key>", d = d + '            <c:value i:type="a:OptionSetValue">', d = d + "              <a:Value>2</a:Value>", d = d + "            </c:value>", d = d + "          </a:KeyValuePairOfstringanyType>", d = d + "        </a:Parameters>", d = d + '        <a:RequestId i:nil="true" />',
d = d + "        <a:RequestName>SetState</a:RequestName>", d = d + "      </request>", d = d + "    </Execute>", d = d + "  </s:Body>", d = d + "</s:Envelope>", j = new XMLHttpRequest; j.open( "POST", Broadlook.Library.serverUrl + "XRMServices/2011/Organization.svc/web", !0 ); j.setRequestHeader( "Accept", "application/xml, text/xml, */*" ); j.setRequestHeader( "Content-Type", "text/xml; charset=utf-8" ); j.setRequestHeader( "SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute" ); j.onreadystatechange =
function () { Broadlook.Library.SetStateResponse( j, b, g >= e.length - 1 ) }; j.send( d )
        } 
    } 
}, SetStateResponse: function ( a, b, c ) { 4 == a.readyState && ( 200 == a.status ? c && "undefined" != typeof b && null != b && b( !0 ) : ( Broadlook.Library.errorHandler( a ), c && "undefined" != typeof b && null != b && b( !1 ) ) ) }, retrieveProfilerCompanyRecord: function ( a, b ) { Broadlook.Library.retrieveRecord( "blt_profilercompany", a, b ) }, createProfilerCompanyRecord: function ( a, b, c, e ) {
    var d = {}; d.blt_name = a; d.blt_Url = b; Broadlook.Library.nz( c ) && ( d.blt_planid = {}, d.blt_planid.Id =
c, d.blt_planid.LogicalName = "blt_profilerplan" ); a = window.JSON.stringify( d ); b = new XMLHttpRequest; b.open( "POST", Broadlook.Library.ODataPath + "/blt_profilercompanySet", !0 ); b.setRequestHeader( "Accept", "application/json" ); b.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); b.onreadystatechange = function () { Broadlook.Library.createReqCallBack( this, e ) }; b.send( a )
}, pause: function ( a ) { for ( a += ( new Date ).getTime(); new Date < a; ); }, extractCrmError: function ( a ) {
    if ( Broadlook.Library.z( a ) ) return null; var b =
a.indexOf( '<span id="ErrorText"' ); return 0 < b ? ( a = ( a + "" ).slice( b ), a = a.slice( a.indexOf( ">" ) + 1 ), a = a.slice( 0, a.indexOf( "<" ) ) ) : null
}, retrieveRecordCallBack: function ( a, b ) {
    if ( 4 == a.readyState ) if ( 200 == a.status ) { var c = null; try { c = JSON.parse( a.responseText ).d, "undefined" != typeof b && null != b && b( c ) } catch ( e ) { c = Broadlook.Library.extractCrmError( a.responseText ), Broadlook.Library.nz( c ) ? Broadlook.Library.showError( c ) : Broadlook.Library.errorHandler( e ), "undefined" != typeof b && null != b && b( !1 ) } } else Broadlook.Library.errorHandler( a ),
"undefined" != typeof b && null != b && b( !1 )
}, createReqCallBack: function ( a, b ) { if ( 4 == a.readyState ) if ( 201 == a.status ) try { var c = JSON.parse( a.responseText ).d; "undefined" != typeof b && null != b && b( c ) } catch ( e ) { c = Broadlook.Library.extractCrmError( a.responseText ), Broadlook.Library.nz( c ) ? Broadlook.Library.showError( c ) : Broadlook.Library.errorHandler( e ), "undefined" != typeof b && null != b && b( !1 ) } else Broadlook.Library.errorHandler( a ), "undefined" != typeof b && null != b && b( !1 ) }, retrieveRecord: function ( a, b, c ) {
    if ( Broadlook.Library.nz( b ) ) if ( Broadlook.Library.nz( a ) ) {
        var b =
( "" + b ).replace( "{", "" ).replace( "}", "" ), e = new XMLHttpRequest; e.open( "GET", Broadlook.Library.ODataPath + "/" + a + "Set(guid'" + b + "')", !0 ); e.setRequestHeader( "Accept", "application/json" ); e.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); e.onreadystatechange = function () { Broadlook.Library.retrieveRecordCallBack( this, c ) }; e.send()
    } else Broadlook.Library.showMessage( "Missing parameter - entityname" ), c( !1 ); else Broadlook.Library.showError( "Missing parameter - Id" ), c( !1 )
}, retrieveRecords: function ( a,
b, c ) {
    if ( "undefined" == typeof b ) Broadlook.Library.showError( "Missing parameter -  Ids" ), c( !1 ); else if ( "undefined" == typeof a ) Broadlook.Library.showError( "Missing parameter - entityname" ), c( !1 ); else if ( Broadlook.Library.demo ) { var b = { results: [] }, e = []; "Lead" == a ? e.LeadId = "lead123" : e.ContactId = "contact123"; e.FirstName = "MMaarryy"; e.LastName = "SSmmiitthh"; b.results[0] = e; c( b ) } else {
        for ( var e = b.split( ";" ), b = "", d = 0; d < e.length; d++ ) {
            var f = e[d]; Broadlook.Library.nz( f ) && ( "" != b && ( b += " or " ), f = f.replace( "{", "" ).replace( "}",
"" ), b += a + "Id eq guid'" + f + "'" )
        } e = new XMLHttpRequest; e.open( "GET", Broadlook.Library.ODataPath + "/" + a + "Set?$filter=" + b, !0 ); e.setRequestHeader( "Accept", "application/json" ); e.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); e.onreadystatechange = function () { Broadlook.Library.retrieveRecordCallBack( this, c ) }; e.send()
    } 
}, updateRecord: function ( a, b, c, e ) {
    if ( Broadlook.Library.demo ) Broadlook.Library.showError( "Update opertaion is not supported in DEMO mode" ), Broadlook.Library.nz( e ) && e( !0 ); else {
        for ( var d =
new XMLHttpRequest, f = {}, g = 0; g < c.length; g++ ) f[c[g].fieldname] = c[g].value; d.open( "POST", Broadlook.Library.ODataPath + "/" + a + "Set(guid'" + b + "')", !0 ); d.setRequestHeader( "Accept", "application/json" ); d.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); d.setRequestHeader( "X-HTTP-Method", "MERGE" ); d.onreadystatechange = function () { Broadlook.Library.updateReqCallBack( this, e, !0 ) }; d.send( JSON.stringify( f ) )
    } 
}, nz: function ( a ) { return "undefined" == typeof a || null == a || "" == "" + a ? !1 : !0 }, z: function ( a ) { return !Broadlook.Library.nz( a ) },
    validateUrl: function ( a ) { var b = RegExp(); b.compile( "[A-Za-z0-9-_]+\\.[A-Za-z0-9-_%&?/.=]+$" ); return b.test( a ) }, cleanMessages: function () { $( "#status" ).html( "" ) }, showMessage: function ( a, b, c ) { null == a && ( a = "" ); var e = document.createElement( "div" ); e.innerHTML = a.replace( /</g, "&lt;" ); Broadlook.Library.nz( c ) && $( e ).append( c ); document.getElementById( "status" ).appendChild( e ); $( "#status" ).hasClass( "ui-widget" ) || $( "#status" ).addClass( "ui-widget" ); Broadlook.Library.nz( b ) && $( e ).addClass( b ) }, showError: function ( a ) {
        Broadlook.Library.showMessage( a,
"ui-state-error ui-corner-all", '<span style="margin-right: 0.3em; float: left;" class="ui-icon ui-icon-alert"></span>' )
    }, errorHandler: function ( a ) { var b = ""; try { b = JSON.parse( a.responseText ).error.message.value } catch ( c ) { b = a.responseText ? a.responseText : a.message ? a.message : a + "" } a.status ? Broadlook.Library.showError( a.status + ": " + a.statusText + ": " + b ) : Broadlook.Library.showError( b ) }, createLink: function ( a, b ) {
        if ( !( "undefined" == typeof a || "" == "" + a ) ) {
            var c = Broadlook.Library.serverUrl, e = !1, d = "" + a; "lead" == d ? c +=
"SFA/leads/edit.aspx" : "opportunity" == d ? c += "SFA/opps/edit.aspx" : "account" == d ? c += "SFA/accts/edit.aspx" : "contact" == d ? c += "SFA/conts/edit.aspx" : "incident" == d ? c += "CS/cases/edit.aspx" : ( c += "main.aspx", e = !0 ); c = c + "?id=" + ( "" + b ); e && ( c = c + "&etn=" + d + "&pagetype=entityrecord" ); return c
        } 
    }, callOnDemandWF: function ( a, b, c, e ) {
        if ( Broadlook.Library.demo ) Broadlook.Library.showError( "Not supported operation in DEMO mode" ); else {
            var d = b.split( ";" ); Broadlook.Library.nz( d[d.length - 1] ) || d.pop(); b = "" + b; ";" != b[b.length - 1] && ( b += ";" );
            var f = c; Broadlook.Library.nz( c ) || ( c = Broadlook.Library.entityTypeCode ); Broadlook.Library.nz( c ) ? ( a = openStdDlg( prependOrgName( "/_grid/cmds/dlg_runworkflow.aspx" ) + "?iObjType=" + CrmEncodeDecode.CrmUrlEncode( f ) + "&iTotal=" + CrmEncodeDecode.CrmUrlEncode( d.length ) + "&wfId=" + CrmEncodeDecode.CrmUrlEncode( a ) + "&sIds=" + CrmEncodeDecode.CrmUrlEncode( b ), d, 500, 200 ), Broadlook.Library.nz( e ) && e( a ) ) : Broadlook.Library.showError( "Cannot determine the Entity Type Code" )
        } 
    }, createCaptureRequest: function ( a, b, c ) {
        var e = {}; e.blt_capturetext =
a + ""; e.blt_enableshield = b; a = window.JSON.stringify( e ); b = new XMLHttpRequest; b.open( "POST", Broadlook.Library.ODataPath + "/blt_capturerequestSet", !0 ); b.setRequestHeader( "Accept", "application/json" ); b.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); b.onreadystatechange = function () { Broadlook.Library.createReqCallBack( this, c ) }; b.send( a )
    }, updateCaptureRequest: function ( a, b, c, e ) {
        var d = {}; d.blt_capturetext = b + ""; d.blt_enableshield = c; b = window.JSON.stringify( d ); c = new XMLHttpRequest; c.open( "POST",
Broadlook.Library.ODataPath + "/blt_capturerequestSet(guid'" + a + "')", !0 ); c.setRequestHeader( "Accept", "application/json" ); c.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); c.setRequestHeader( "X-HTTP-Method", "MERGE" ); c.onreadystatechange = function () { 4 == this.readyState && ( 204 == this.status || 1223 == this.status ? Broadlook.Library.retrieveCaptureRequest( a, e ) : ( Broadlook.Library.errorHandler( this ), "undefined" != typeof e && null != e && e( !1 ) ) ) }; c.send( b )
    }, retrieveCaptureRequest: function ( a, b ) {
        var c = new XMLHttpRequest;
        c.open( "GET", Broadlook.Library.ODataPath + "/blt_capturerequestSet(guid'" + a + "')", !0 ); c.setRequestHeader( "Accept", "application/json" ); c.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); c.onreadystatechange = function () { Broadlook.Library.retrieveRecordCallBack( this, b ) }; c.send()
    }, retrieveCaptureContacts: function ( a, b ) {
        var c = new XMLHttpRequest; c.open( "GET", a, !0 ); c.setRequestHeader( "Accept", "application/json" ); c.setRequestHeader( "Content-Type", "application/json; charset=utf-8" ); c.onreadystatechange =
function () { Broadlook.Library.retrieveRecordCallBack( this, b ) }; c.send()
    }, findCaptureContactChanges: function ( a, b ) { var c = []; if ( a.blt_contactcaptureid !== b.blt_contactcaptureid ) throw "Mismatching identificators"; Broadlook.Library.addChange( c, a, b, "blt_fullname" ); Broadlook.Library.addChange( c, a, b, "blt_firstname" ); Broadlook.Library.addChange( c, a, b, "blt_middlename" ); Broadlook.Library.addChange( c, a, b, "blt_lastname" ); return c }, addChange: function ( a, b, c, e ) {
        "undefined" != typeof c[e] && b[e] !== c[e] && a.push( { fieldname: e,
            value: c[e]
        } )
    }, convertParams: { ending: "", source: "", target: "", newids: [] }, convertLeads: function ( a, b ) {
        var c = "" + jQuery( "#grid" ).jqGrid( "getGridParam", "selarrrow" ); if ( "" == c ) Broadlook.Library.showError( "No records selected" ); else if ( c = c.split( "," ), 0 != c.length ) if ( "contact" != a && "lead" != a ) Broadlook.Library.showError( "Not supported conversion target" ); else if ( "blt_capturecontact" != b && "blt_profilerlead" != b ) Broadlook.Library.showError( "Not supported conversion source" ); else {
            convertParams = {}; convertParams.source =
b; convertParams.target = a; convertParams.ending = ""; 1 < c.length && ( convertParams.ending = "s" ); convertParams.connlist = []; convertParams.connids = []; convertParams.connrownums = []; convertParams.savedids = []; convertParams.newlist = []; convertParams.newids = []; convertParams.companynames = []; for ( var e = 0; e < c.length; e++ ) {
                var d = c[e], f = jQuery( "#grid" ).jqGrid( "getRowData", d ), g, j, h, k; "blt_capturecontact" == b ? ( g = f.blt_capturecontactId, j = f.blt_fullname, h = f.blt_companyname ) : ( g = f.guid, j = f.name, h = "" ); "lead" == a ? ( k = f.crmleadid, f =
f.crmleadname ) : ( k = f.crmcontactid, f = f.crmcontactname ); Broadlook.Library.nz( h ) && convertParams.companynames.push( h ); Broadlook.Library.nz( k ) ? ( h = Broadlook.Library.formatConnectionLink( k, f, a, !0 ), convertParams.connlist.push( "<li>" + j + " is already connected to " + h + "</li>" ), convertParams.connids.push( k ), convertParams.connrownums.push( d ), convertParams.savedids.push( g ) ) : ( convertParams.newlist.push( "<li>" + j + "</li>" ), convertParams.newids.push( g ) )
            } $( ".ending", "#converttargetdlg" ).text( convertParams.ending ); $( "#convert-list-existing" ).html( "<ul>" +
convertParams.connlist.join( "" ) + "</ul>" ); $( "#convert-list-new" ).html( "<ul>" + convertParams.newlist.join( "" ) + "</ul>" ); c = $( "#convert-header-existing" ).html(); c = c.replace( /contact/gi, convertParams.target ); c = c.replace( /lead/gi, convertParams.target ); $( "#convert-header-existing" ).html( c ); c = $( "#convert-header-new" ).html(); c = c.replace( /contact/gi, convertParams.target ); c = c.replace( /lead/gi, convertParams.target ); $( "#convert-header-new" ).html( c ); 0 < convertParams.newids.length ? $( "#convert-header-new" ).show() : $( "#convert-header-new" ).hide();
            c = "0"; if ( !0 === convertParams.updateexisting || !1 !== convertParams.updateexisting && 0 < convertParams.connids.length ) c = "1"; $( "#convert-checkbox-existing", "#converttargetdlg" ).val( c ); 0 < convertParams.connids.length ? $( "#convert-header-existing" ).show() : $( "#convert-header-existing" ).hide(); Broadlook.Library.convertDialog( convertParams )
        } 
    }, convertDialog: function ( a ) {
        $( "#converttargetdlg" ).dialog( { title: "Convert to " + a.target + a.ending, width: 600, height: 200, modal: !0, buttons: { Next: function () {
            a.updateexisting = 0 < a.connids.length &&
"1" == $( "[#convert-checkbox-existing]:checked", "#converttargetdlg" ).val(); a.lastStep = Broadlook.Library.convertDialog; a.updateexisting ? Broadlook.Library.mergeDialog( a ) : "contact" == a.target ? Broadlook.Library.accountDialog( a ) : Broadlook.Library.ownerDialog( a ); $( this ).dialog( "close" )
        }, Cancel: function () { $( this ).dialog( "close" ) } 
        }
        } ).width( 570 ).height( 170 )
    }, lookupAccount: function () { var a = $( "#AccountNameTextBox" ).val(); Broadlook.Library.retrieveAccountRecords( a, Broadlook.Library.accountCallback ) }, accountDialog: function ( a ) {
        var b =
$( "#account-list" ); $( "option", b ).remove(); var c = b.prop ? b.prop( "options" ) : b.attr( "options" ); c && $.each( a.companynames, function ( a, b ) { b && ( c[c.length] = new Option( b, b ) ) } ); Broadlook.Library.z( a.accountRecords ) && ( a.DefaultAccountName = Broadlook.Library.getDefaultAccountName(), Broadlook.Library.convertParams = a, "" != a.DefaultAccountName && ( $( "#AccountNameTextBox", "#lookupaccount" ).val( a.DefaultAccountName ), Broadlook.Library.lookupAccount() ) ); a.updateexisting ? $( "#lookupaccount" ).dialog( { title: "Select a parent account for the new contacts",
    width: 600, height: 200, modal: !0, buttons: { Back: function () { Broadlook.Library.convertDialog( a ); $( this ).dialog( "close" ) }, Next: function () { var b = $( "input[name:account]:checked", "#lookupres" ).val(); Broadlook.Library.nz( b ) && ( a.acc = b, a.lastStep = Broadlook.Library.accountDialog, "lead" == a.source ? Broadlook.Library.ownerDialog( a ) : Broadlook.Library.convertToNewCrmContact( a.newids, a.source, b ), $( this ).dialog( "close" ) ) }, Cancel: function () { $( this ).dialog( "close" ) } }
} ).width( 570 ).height( 170 ) : $( "#lookupaccount" ).dialog( { title: "Select a parent account for the new contacts",
    width: 600, height: 200, modal: !0, buttons: { Back: function () { Broadlook.Library.convertDialog( a ); $( this ).dialog( "close" ) }, Execute: function () { var b = $( "input[name:account]:checked", "#lookupres" ).val(); Broadlook.Library.nz( b ) && ( Broadlook.Library.convertToNewCrmContact( a.newids, a.source, b ), $( this ).dialog( "close" ) ) }, Cancel: function () { $( this ).dialog( "close" ) } }
} ).width( 570 ).height( 170 )
    }, ownerDialog: function ( a ) {
        Broadlook.Library.z( a.ownerRecords ) && ( Broadlook.Library.convertParams = a, Broadlook.Library.retrieveUsers( Broadlook.Library.ownerCallback ) );
        var b = [], b = a.updateexisting ? a.newids : a.newids.concat( a.savedids ); $( "#lookupowner" ).dialog( { title: "Select an owner for new records", width: 600, height: 200, modal: !0, buttons: { Back: function () { a.lastStep( a ); $( this ).dialog( "close" ) }, Execute: function () {
            var c = $( "input[name:systemuser]:checked", "#lookupowner-res" ).val(); Broadlook.Library.nz( c ) && ( a.source == Broadlook.Metadata.Entities.ProfilerLead.Name ? Broadlook.Library.assignProfilerLeads( b.join( ";" ), c ) : a.source == Broadlook.Metadata.Entities.CaptureContact.Name &&
Broadlook.Library.assignCaptureContacts( b.join( ";" ), c ), "lead" == a.target ? Broadlook.Library.convertToNewCrmLead( b, a.source ) : "contact" == a.target && Broadlook.Library.convertToNewCrmContact( b, a.source, a.acc ), Broadlook.Library.mergeExecute( a ), $( this ).dialog( "close" ) )
        }, Cancel: function () { $( this ).dialog( "close" ) } 
        }
        } ).width( 570 ).height( 170 )
    }, ownerCallback: function ( a ) {
        if ( !( "undefined" === typeof a || null === a ) ) {
            Broadlook.Library.convertParams.ownerRecords = a; var b = []; b.push( "<div>" ); var c = []; c.push( "<div>" ); var e =
Broadlook.Library.currentUserId.replace( "{", "" ).replace( "}", "" ).toLowerCase(); if ( 0 == a.results ) Broadlook.Library.addAccountRow( c, "No users found", "" ); else for ( var d = 0; d < a.results.length; d++ ) { var f = a.results[d].FullName, g = a.results[d].SystemUserId.replace( "{", "" ).replace( "}", "" ).toLowerCase(), f = Broadlook.Library.formatRadio( "systemuser", g, f, e ), j = Broadlook.Library.formatTextLink( g, "View", "systemuser" ); g == e ? Broadlook.Library.addAccountRow( b, f, j ) : Broadlook.Library.addAccountRow( c, f, j ) } b.push( "</div>" );
            c.push( "</div>" ); 2 < b.length && b.push( "<hr>" ); $( "#lookupowner-res" ).html( b.join( "" ) + c.join( "" ) )
        } 
    }, mergeCallback: function ( a ) {
        var b = Broadlook.Library.convertParams; b.mergeRecords = a; $( "#converttargetdlg" ).dialog( "close" ); var c = b.connids, e = b.connrownums, d = "ContactId"; "lead" == b.target && ( d = "LeadId" ); var f = [], g = $( "#merge-first-template", "#merge-dlg" ); f.push( "<tr>" + g.html() + "</tr>" ); g = $( "#merge-second-template", "#merge-dlg" ); f.push( "<tr>" + g.html() + "</tr>" ); for ( var g = { value: 0, group: 0 }, j = 0; j < e.length; j++ ) {
            for ( var h =
e[j], h = jQuery( "#grid" ).jqGrid( "getRowData", h ), k = null, l = 0; l < a.results.length; l++ ) if ( a.results[l][d] == c[j] ) { k = a.results[l]; break } null == k ? newids += c[j] + ";" : ( g.group = j, f.push( Broadlook.Library.addRows( k, h, g, b.target ).join( "" ) ) )
        } $( "#merge-table" ).html( "" ); $( "<table></table>" ).append( f.join( "" ) ).appendTo( "#merge-table" ); $( "#merge-all-radio1, #merge-all-radio2", "#merge-table" ).click( function ( a ) {
            1 == a.target.id.slice( -1 ) ? $( "input[type='radio'][id*='radio1'][id*='person']", "#merge-table" ).click() : $( "input[type='radio'][id*='radio2'][id*='person']",
"#merge-table" ).click()
        } ); $( "input[type='radio'][id*='radio'][id*='person']", "#merge-table" ).click( function ( a ) { var b = $( a.target ).attr( "id" ), a = b.slice( b.indexOf( "-group" ) + 6 ), b = b.slice( b.indexOf( "-radio" ) + 6, b.indexOf( "-group" ) ), a = $( "tr[id*='group" + a + "']", "#merge-table" ); $( "input[type='radio'][id*='radio" + b + "']", a ).click() } )
    }, mergeDialog: function ( a ) {
        if ( Broadlook.Library.z( a.mergeRecords ) ) {
            Broadlook.Library.convertParams = a; var b = "Lead"; "contact" == a.target && ( b = "Contact" ); Broadlook.Library.retrieveRecords( b,
a.connids.join( ";" ), Broadlook.Library.mergeCallback )
        } $( "#merge-dlg" ).dialog( { title: "Update existing CRM data", width: 600, height: 200, modal: !0, buttons: { Back: function () { Broadlook.Library.convertDialog( a ); $( this ).dialog( "close" ) }, Next: function () {
            for ( var b = $( "TR", "#merge-table" ), e = [], d = null, f = 0; f < b.length; f++ ) {
                var g = b[f], j = $( "#merge-row-id", g ).val(); if ( Broadlook.Library.nz( j ) ) j = $( "#merge-row-id", g ).val(), null != d && e.push( d ), d = {}, d.id = j, d.changes = []; else if ( "1" === $( "#merge-row-radio2:checked", g ).val() ) {
                    var j =
$( "#merge-row-fieldname", g ).val(), g = $( "#merge-row-label2", g ).text(), h = {}; h.fieldname = j; h.value = g; null != d && d.changes.push( h )
                } 
            } null != d && e.push( d ); a.merges = e; 0 < a.newids.length ? ( a.lastStep = Broadlook.Library.mergeDialog, "contact" == a.target ? Broadlook.Library.accountDialog( a ) : Broadlook.Library.ownerDialog( a ) ) : Broadlook.Library.mergeExecute( a ); $( this ).dialog( "close" )
        }, Cancel: function () { $( this ).dialog( "close" ) } 
        }
        } ).width( 570 ).height( 170 )
    }, mergeExecute: function ( a ) {
        var b = a.merges; if ( !Broadlook.Library.z( b ) ) for ( i =
0; i < b.length; i++ ) "lead" == a.target ? Broadlook.Library.updateRecord( "Lead", b[i].id, b[i].changes, null ) : "contact" == a.target && Broadlook.Library.updateRecord( "Contact", b[i].id, b[i].changes, null )
    }, addRows: function ( a, b, c, e ) {
        var d = [], f = "", g = b.name; g || ( g = b.blt_fullname, f = "blt_" ); var j; j = "lead" == e ? a.LeadId : a.ContactId; var h = $( "#merge-header-template", "#merge-dlg" ).clone(); $( "#merge-header-profilerrecord", h ).html( g ); $( "#merge-header-crmrecord", h ).html( Broadlook.Library.formatConnectionLink( j, a.FullName, e, !0 ) );
        $( "#merge-person-radio1", h ).attr( "name", "merge-person-radio-group" + c.group ); $( "#merge-person-radio2", h ).attr( "name", "merge-person-radio-group" + c.group ); $( "#merge-person-radio1", h ).attr( "id", "merge-person-radio1-group" + c.group ); $( "#merge-person-radio2", h ).attr( "id", "merge-person-radio2-group" + c.group ); $( "#merge-row-id", h ).val( j ); d.push( "<tr>" + h.html() + "</tr>" ); g = $( "#merge-row-template", "#merge-dlg" ); j = !1; h = g.clone(); Broadlook.Library.addRow( h, a, b, "First Name", "FirstName", f + "firstname", c ) && ( j = !0, d.push( "<tr id='merge-row-" +
c.value + "-group" + c.group + "'>" + h.html() + "</tr>" ) ); h = g.clone(); Broadlook.Library.addRow( h, a, b, "Middle Name", "MiddleName", f + "middlename", c ) && ( j = !0, d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'>" + h.html() + "</tr>" ) ); h = g.clone(); Broadlook.Library.addRow( h, a, b, "Last Name", "LastName", f + "lastname", c ) && ( j = !0, d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'>" + h.html() + "</tr>" ) ); "lead" == e && ( h = g.clone(), e = "contextcompany", "" != f && ( e = "blt_companyname" ), Broadlook.Library.addRow( h, a, b, "Company Name",
"CompanyName", e, c ) && ( d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'></tr>" ), j = !0 ) ); h = g.clone(); e = "title"; "" != f && ( e = "blt_jobtitle" ); Broadlook.Library.addRow( h, a, b, "Job Title", "JobTitle", e, c ) && ( j = !0, d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'>" + h.html() + "</tr>" ) ); h = g.clone(); e = "phone"; "" != f && ( e = "blt_telephone1" ); Broadlook.Library.addRow( h, a, b, "Phone", "Telephone1", e, c ) && ( j = !0, d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'>" + h.html() + "</tr>" ) ); h = g.clone(); e = "phone2"; "" !=
f && ( e = "blt_telephone2" ); Broadlook.Library.addRow( h, a, b, "Phone 2", "Telephone2", e, c ) && ( j = !0, d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'>" + h.html() + "</tr>" ) ); h = g.clone(); e = "email"; "" != f && ( e = "EmailAddress" ); Broadlook.Library.addRow( h, a, b, "Email", "EMailAddress1", e, c ) && ( j = !0, d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'>" + h.html() + "</tr>" ) ); j || d.push( "<tr id='merge-row-" + c.value + "-group" + c.group + "'><td colspan='5'>No changes</td></tr>" ); return d
    }, stripTags: function ( a ) {
        return a.replace( RegExp( "<[^<>]+>",
"g" ), "" )
    }, addRow: function ( a, b, c, e, d, f, g ) { b = b[d]; c = Broadlook.Library.stripTags( c[f] ); "undefined" == typeof b && ( b = "" ); if ( !Broadlook.Library.nz( c ) || b == c ) return !1; g.value++; $( "#merge-row-fieldlabel", a ).text( e ); $( "#merge-row-fieldname", a ).val( d ); $( "#merge-row-label1", a ).text( b ); $( "#merge-row-label2", a ).text( c ); $( "#merge-row-radio1", a ).attr( "name", "merge-row-" + g.value + "-radio-" + f ); $( "#merge-row-radio2", a ).attr( "name", "merge-row-" + g.value + "-radio-" + f ); return !0 }, convertToNewCrmLead: function ( a, b ) {
        Broadlook.Library.demo ?
Broadlook.Library.showError( "Convert opertaion is not supported in DEMO mode" ) : Broadlook.Library.nz( a ) ? b == Broadlook.Metadata.Entities.CaptureContact.Name ? Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertCaptureContactToNewCrmLead, a.join( ";" ), Broadlook.Metadata.Entities.CaptureContact.EntityTypeCode, Broadlook.ContactCapture.loadGrid ) : b == Broadlook.Metadata.Entities.ProfilerLead.Name ? Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertProfilerLeadToNewCrmLead, a.join( ";" ),
Broadlook.Metadata.Entities.ProfilerLead.EntityTypeCode ) : Broadlook.Library.showError( "Unsupported source - " + b ) : Broadlook.Library.showError( "Nothing to convert" )
    }, convertToNewCrmContact: function ( a, b, c ) {
        Broadlook.Library.demo ? Broadlook.Library.showError( "Convert opertaion is not supported in DEMO mode" ) : Broadlook.Library.nz( a ) ? "new" == c ? Broadlook.Library.createAccountRecord( "", function ( c ) {
            c && ( b == Broadlook.Metadata.Entities.ProfilerLead.Name ? ( Broadlook.Library.connectProfilerLeadsToCrmAccount( a.join( ";" ),
c ), Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertProfilerLeadToNewCrmContactAndNewCrmAccount, a.join( ";" ), Broadlook.Metadata.Entities.ProfilerLead.EntityTypeCode ) ) : b == Broadlook.Metadata.Entities.CaptureContact.Name && ( Broadlook.Library.connectCaptureContactsToCrmAccount( a.join( ";" ), c ), Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertCaptureContactToNewCrmContactAndNewCrmAccount, a.join( ";" ), Broadlook.Metadata.Entities.CaptureContact.EntityTypeCode ) ) )
        } ) : "none" ==
c ? b == Broadlook.Metadata.Entities.ProfilerLead.Name ? Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertProfilerLeadToNewCrmContact, a.join( ";" ), Broadlook.Metadata.Entities.ProfilerLead.EntityTypeCode ) : b == Broadlook.Metadata.Entities.CaptureContact.Name && Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertCaptureContactToNewCrmContact, a.join( ";" ), Broadlook.Metadata.Entities.CaptureContact.EntityTypeCode ) : b == Broadlook.Metadata.Entities.ProfilerLead.Name ? ( Broadlook.Library.connectProfilerLeadsToCrmAccount( a.join( ";" ),
c ), Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertProfilerLeadToNewCrmContact, a.join( ";" ), Broadlook.Metadata.Entities.ProfilerLead.EntityTypeCode ) ) : b == Broadlook.Metadata.Entities.CaptureContact.Name && ( Broadlook.Library.connectCaptureContactsToCrmAccount( a.join( ";" ), c ), Broadlook.Library.callOnDemandWF( Broadlook.Metadata.Workflows.ConvertCaptureContactToNewCrmContact, a.join( ";" ), Broadlook.Metadata.Entities.CaptureContact.EntityTypeCode ) ) : Broadlook.Library.showError( "Nothing to convert" )
    },
    accountCallback: function ( a ) {
        if ( !( "undefined" === typeof a || null === a ) ) {
            Broadlook.Library.convertParams.accountRecords = a; var b = []; b.push( "<div>" ); var c = []; c.push( "<div>" ); var e = Broadlook.Library.getDefaultAccountId(); if ( 0 == a.results ) Broadlook.Library.addAccountRow( c, "No matching accounts found", "" ); else for ( var d = 0; d < a.results.length; d++ ) {
                var f = a.results[d].AccountId, g = Broadlook.Library.formatRadio( "account", f, a.results[d].Name, e ), j = Broadlook.Library.formatTextLink( f, "View", "account" ); f == e ? Broadlook.Library.addAccountRow( b,
g, j ) : Broadlook.Library.addAccountRow( c, g, j )
            } a = Broadlook.Library.formatRadio( "account", "new", "Create new account", e ); Broadlook.Library.addAccountRow( b, a, "" ); e = Broadlook.Library.formatRadio( "account", "none", "Create contacts without account", e ); Broadlook.Library.addAccountRow( b, e, "" ); b.push( "</div>" ); c.push( "</div>" ); b.push( "<hr>" ); $( "#lookupres" ).html( b.join( "" ) + c.join( "" ) )
        } 
    }, getDefaultAccountId: function () {
        if ( Broadlook.Library.demo ) return "ID2"; var a = Broadlook.Library.getXrmPage(); return Broadlook.Library.entityTypeName ==
Broadlook.Metadata.Entities.ProfilerCompany.Name ? Broadlook.CompanyViewer.crmaccountId : "account" == Broadlook.Library.entityTypeName ? a.data.entity.getId() : null
    }, getDefaultAccountName: function () {
        if ( Broadlook.Library.demo ) return "Demo"; var a = Broadlook.Library.getXrmPage(); return Broadlook.Library.entityTypeName == Broadlook.Metadata.Entities.ProfilerCompany.Name ? Broadlook.Library.nz( Broadlook.CompanyViewer.crmaccountName ) ? Broadlook.CompanyViewer.crmaccountName : a.data.entity.attributes.get( "blt_name" ).getValue() :
"account" == Broadlook.Library.entityTypeName ? a.data.entity.attributes.get( "name" ).getValue() : "lead" == Broadlook.Library.entityTypeName ? a.data.entity.attributes.get( "companyname" ).getValue() : convertParams.companynames && 0 < convertParams.companynames.length ? convertParams.companynames[0] : ""
    }, addAccountRow: function ( a, b, c ) { a.push( "<div><span class='lookup-res-name'>" ); a.push( b ); a.push( "</span>&nbsp;&nbsp;<span class='lookup-res-link'>" ); a.push( c ); a.push( "</span></div>" ) }, formatRadio: function ( a, b, c, e ) {
        var d =
""; b === e && ( d = " checked " ); e = ( a + "_" + b ).replace( " ", "_" ); return "<input type='radio' id='" + e + "' name='" + a + "' value='" + b + "' " + d + " /><label for='" + e + "'>" + c + "</label>"
    }, formatTextLink: function ( a, b, c ) { if ( "undefined" == typeof a || null == a ) return ""; if ( null == b || 0 == b.length ) b = "..."; var e = "", e = "undefined" == typeof c || null == c ? a : Broadlook.Library.createLink( c, a ); return "<a target='_blank' href='" + e + "'>" + b + "</a>" }, formatConnectionLink: function ( a, b, c, e ) {
        if ( "undefined" == typeof a || null == a ) return ""; if ( null == b || 0 == b.length ) b =
"..."; var a = Broadlook.Library.createLink( c, a ), d = ""; e && ( d = "&nbsp;" + b ); return "<a target='_blank' href='" + a + "'><img src='Images/crm" + c + ".gif' alt='" + b + "' title='" + b + "' class='connection-image'><span>" + d + "</span></a>"
    }, __namespace: !0
};
(function ( a ) {
    a.widget( "ui.combobox", { _create: function () {
        var b = this, c = this.element.hide(), e = c.children( ":selected" ), e = e.val() ? e.text() : "", d = this.input = a( "<input>" ).insertAfter( c ).val( e ).autocomplete( { delay: 0, minLength: 0, source: function ( b, d ) {
            var e = RegExp( a.ui.autocomplete.escapeRegex( b.term ), "i" ); d( c.children( "option" ).map( function () {
                var c = a( this ).text(); if ( this.value && ( !b.term || e.test( c ) ) ) return { label: c.replace( RegExp( "(?![^&;]+;)(?!<[^<>]*)(" + a.ui.autocomplete.escapeRegex( b.term ) + ")(?![^<>]*>)(?![^&;]+;)",
"gi" ), "<strong>$1</strong>" ), value: c, option: this
                }
            } ) )
        }, select: function ( a, c ) { c.item.option.selected = !0; b._trigger( "selected", a, { item: c.item.option } ) }, change: function ( b, e ) { if ( !e.item ) { var j = RegExp( "^" + a.ui.autocomplete.escapeRegex( a( this ).val() ) + "$", "i" ), h = !1; c.children( "option" ).each( function () { if ( a( this ).text().match( j ) ) return this.selected = h = !0, !1 } ); if ( !h ) return a( this ).val( "" ), c.val( "" ), d.data( "autocomplete" ).term = "", !1 } } 
        } ).addClass( "ui-widget ui-widget-content ui-corner-left" ); d.data( "autocomplete" )._renderItem =
function ( b, c ) { return a( "<li></li>" ).data( "item.autocomplete", c ).append( "<a>" + c.label + "</a>" ).appendTo( b ) }; this.button = a( "<button type='button'>&nbsp;</button>" ).attr( "tabIndex", -1 ).attr( "title", "Show All Items" ).insertAfter( d ).button( { icons: { primary: "ui-icon-triangle-1-s" }, text: !1 } ).removeClass( "ui-corner-all" ).addClass( "ui-corner-right ui-button-icon" ).click( function () { d.autocomplete( "widget" ).is( ":visible" ) ? d.autocomplete( "close" ) : ( a( this ).blur(), d.autocomplete( "search", "" ), d.focus() ) } )
    }, destroy: function () {
        this.input.remove();
        this.button.remove(); this.element.show(); a.Widget.prototype.destroy.call( this )
    } 
    } )
} )( jQuery );